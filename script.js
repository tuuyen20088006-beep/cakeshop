// ------------------- C·∫§U H√åNH -------------------
const API_URL = "https://banhngot.fitlhu.com/api"; // base API
// ------------------- HILPER: t√¨m token trong response nhi·ªÅu d·∫°ng -------------------
function extractToken(obj) {
  // th·ª≠ nhi·ªÅu ch·ªó c√≥ th·ªÉ ch·ª©a token (t√πy API)
  if (!obj) return null;
  if (typeof obj === "string") return obj; // n·∫øu tr·∫£ th·∫≥ng token
  if (obj.token) return obj.token;
  if (obj.access_token) return obj.access_token;
  if (obj.data && (obj.data.token || obj.data.access_token)) return obj.data.token || obj.data.access_token;
  if (obj.result && (obj.result.token || obj.result.access_token)) return obj.result.token || obj.result.access_token;
  return null;
}

// ------------------- LOGIN HANDLER -------------------
document.addEventListener("DOMContentLoaded", () => {
  const loginForm = document.getElementById("loginForm");
  const msgEl = document.getElementById("message") || document.getElementById("loginMessage") || document.querySelector(".message");

  // n·∫øu ƒë√£ c√≥ token th√¨ chuy·ªÉn ƒë·∫øn dashboard (n·∫øu ƒëang ·ªü index.html)
  const storedToken = localStorage.getItem("token");
  if (storedToken && window.location.pathname.endsWith("index.html")) {
    console.log("[Auth] token found in localStorage -> redirecting to dashboard");
    window.location.href = "dashboard.html";
    return;
  }

  if (loginForm) {
    loginForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      // clear message
      if (msgEl) msgEl.textContent = "";

      const username = document.getElementById("username").value.trim();
      const password = document.getElementById("password").value.trim();

      // basic check
      if (!username || !password) {
        if (msgEl) msgEl.textContent = "Vui l√≤ng nh·∫≠p username v√† password.";
        return;
      }

      try {
        // G·ªçi API login
        const res = await fetch(`${API_URL}/auth/login`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Accept": "application/json"
          },
          body: JSON.stringify({ username, password })
        });

        // Log chi ti·∫øt ƒë·ªÉ debug
        console.log("[Login] HTTP status:", res.status, res.statusText);
        const text = await res.text(); // ƒë·ªçc raw text ƒë·ªÉ ghi log
        console.log("[Login] raw response text:", text);

        // Th·ª≠ parse json n·∫øu c√≥ th·ªÉ
        let data = null;
        try { data = JSON.parse(text); } catch (err) { data = null; }

        console.log("[Login] parsed JSON:", data);

        // N·∫øu HTTP 2xx
        if (res.ok) {
          // L·∫•y token theo nhi·ªÅu c·∫•u tr√∫c
          const token = extractToken(data) || extractToken(text);
          if (token) {
            localStorage.setItem("token", token);
            // l∆∞u th√™m username cho hi·ªÉn th·ªã
            localStorage.setItem("username", username);
            console.log("[Login] token saved to localStorage.");
            window.location.href = "dashboard.html";
            return;
          } else {
            // th√†nh c√¥ng (res.ok) nh∆∞ng kh√¥ng t√¨m token -> c√≥ th·ªÉ API tr·∫£ success + user data
            if (data && (data.success === true || data.status === "success")) {
              // n·∫øu API kh√¥ng tr·∫£ token, b·∫°n c√≥ th·ªÉ l∆∞u 1 flag ƒëƒÉng nh·∫≠p t·∫°m
              localStorage.setItem("token", "no-token-provided");
              localStorage.setItem("username", username);
              console.warn("[Login] server returned success but no token found. Stored fallback token.");
              window.location.href = "dashboard.html";
              return;
            }
          }
        }

        // N·∫øu ƒë·∫øn ƒë√¢y: l·ªói
        // 1) hi·ªÉn th·ªã th√¥ng b√°o r√µ r√†ng t·ª´ server n·∫øu c√≥
        if (data && data.message) {
          if (msgEl) msgEl.textContent = data.message;
        } else if (data && data.error) {
          if (msgEl) msgEl.textContent = data.error;
        } else {
          if (msgEl) msgEl.textContent = `ƒêƒÉng nh·∫≠p th·∫•t b·∫°i (HTTP ${res.status}).`;
        }

      } catch (err) {
        console.error("[Login] Exception:", err);
        if (msgEl) msgEl.textContent = "L·ªói m·∫°ng ho·∫∑c CORS. Ki·ªÉm tra Console/Network.";
      }
    });
  }

  // ------------------- DASHBOARD PAGE -------------------
  const productListEl = document.getElementById("productList") || document.getElementById("cakes") || document.getElementById("productList");
  if (productListEl) {
    // ki·ªÉm tra token, n·∫øu kh√¥ng c√≥ -> quay v·ªÅ login
    const token = localStorage.getItem("token");
    if (!token) {
      alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. Quay v·ªÅ trang ƒëƒÉng nh·∫≠p.");
      window.location.href = "index.html";
      return;
    }

    // Hi·ªÉn th·ªã username n·∫øu c√≥
    const usernameEl = document.getElementById("welcome-text");
    const storedUser = localStorage.getItem("username");
    if (usernameEl && storedUser) usernameEl.textContent = `Xin ch√†o, ${storedUser}!`;

    // H√†m l·∫•y danh s√°ch cakes (h·ªó tr·ª£ page & limit)
    async function fetchCakes(page = 1, limit = 9) {
      try {
        const url = `${API_URL}/cakes?page=${page}&limit=${limit}`;
        console.log("[Fetch cakes] GET", url);
        const res = await fetch(url, {
          method: "GET",
          headers: {
            "Accept": "application/json",
            // n·∫øu server y√™u c·∫ßu auth cho GET th√¨ set header Authorization
            ...(token && token !== "no-token-provided" ? { "Authorization": `Bearer ${token}` } : {})
          }
        });

        console.log("[Fetch cakes] status:", res.status);
        const data = await res.json().catch(() => null);
        console.log("[Fetch cakes] data:", data);

        if (!res.ok) {
          // hi·ªÉn th·ªã l·ªói t·ª´ server
          if (data && data.message) productListEl.innerHTML = `<p style="color:red">${data.message}</p>`;
          else productListEl.innerHTML = `<p style="color:red">L·ªói khi t·∫£i danh s√°ch b√°nh (HTTP ${res.status})</p>`;
          return;
        }

        // API tr·∫£ { success: true, data: [...] }
        const items = data && data.data ? data.data : (Array.isArray(data) ? data : []);
        if (!items.length) {
          productListEl.innerHTML = "<p>Kh√¥ng c√≥ b√°nh n√†o.</p>";
          return;
        }

        // Render items
        productListEl.innerHTML = items.map(p => `
            <div class="product-card">
              <img src="${p.image}" alt="${p.name}" />
              <h3>${p.name}</h3>
              <p>${p.category || ''}</p>
              <p><strong>${(p.price || 0).toLocaleString()}ƒë</strong></p>
              <p>${p.description || ''}</p>
              <div class="actions">
                <button onclick="openEdit(${p.id})">‚úèÔ∏è</button>
                <button onclick="deleteCake(${p.id})">üóëÔ∏è</button>
              </div>
            </div>`).join("");

      } catch (err) {
        console.error("[Fetch cakes] Exception:", err);
        productListEl.innerHTML = "<p style='color:red'>L·ªói khi g·ªçi API. Ki·ªÉm tra Console/Network.</p>";
      }
    }

    // kh·ªüi ch·∫°y
    fetchCakes();

    // Expose edit/delete functions (c·∫ßn token for auth)
    window.openEdit = async function (id) {
      console.log("Open edit modal for id", id);
      // b·∫°n c√≥ modal form -> t√¨m cake trong current list ho·∫∑c g·ªçi detail API
      // (n√™u c·∫ßn m√¨nh s·∫Ω vi·∫øt ph·∫ßn modal edit)
    };

    window.deleteCake = async function (id) {
      if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a?")) return;
      try {
        const res = await fetch(`${API_URL}/cakes/${id}`, {
          method: "DELETE",
          headers: {
            "Authorization": (token && token !== "no-token-provided") ? `Bearer ${token}` : ""
          }
        });
        const data = await res.json().catch(()=>null);
        console.log("[Delete] res.status", res.status, "data", data);
        if (res.ok && data && data.success) {
          alert("X√≥a th√†nh c√¥ng");
          fetchCakes();
        } else {
          alert(data && data.message ? data.message : `X√≥a th·∫•t b·∫°i (HTTP ${res.status})`);
        }
      } catch (err) {
        console.error("[Delete] Exception:", err);
        alert("L·ªói khi x√≥a. Ki·ªÉm tra Console/Network.");
      }
    };
  }

  // logout (n·∫øu c√≥ n√∫t)
  const logoutBtn = document.getElementById("logoutBtn");
  if (logoutBtn) {
    logoutBtn.addEventListener("click", () => {
      localStorage.removeItem("token");
      localStorage.removeItem("username");
      window.location.href = "index.html";
    });
  }
});
